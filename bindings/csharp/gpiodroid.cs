//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace gpiodroid {

public class chip_info : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal chip_info(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(chip_info obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(chip_info obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~chip_info() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          gpiodroidPINVOKE.delete_chip_info(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public chip_info(chip_info other) : this(gpiodroidPINVOKE.new_chip_info__SWIG_0(chip_info.getCPtr(other)), true) {
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__string name() {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(gpiodroidPINVOKE.chip_info_name(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__string label() {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(gpiodroidPINVOKE.chip_info_label(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__size_t num_lines() {
    SWIGTYPE_p_std__size_t ret = new SWIGTYPE_p_std__size_t(gpiodroidPINVOKE.chip_info_num_lines(swigCPtr), true);
    return ret;
  }

}

}
namespace gpiodroid {

public class chip : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal chip(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(chip obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(chip obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~chip() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          gpiodroidPINVOKE.delete_chip(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public chip(SWIGTYPE_p_std__filesystem__path path) : this(gpiodroidPINVOKE.new_chip__SWIG_0(SWIGTYPE_p_std__filesystem__path.getCPtr(path)), true) {
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
  }

  public chip(chip other) : this(gpiodroidPINVOKE.new_chip__SWIG_1(chip.swigRelease(other)), true) {
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
  }

  public void close() {
    gpiodroidPINVOKE.chip_close(swigCPtr);
  }

  public SWIGTYPE_p_std__filesystem__path path() {
    SWIGTYPE_p_std__filesystem__path ret = new SWIGTYPE_p_std__filesystem__path(gpiodroidPINVOKE.chip_path(swigCPtr), true);
    return ret;
  }

  public chip_info get_info() {
    chip_info ret = new chip_info(gpiodroidPINVOKE.chip_get_info(swigCPtr), true);
    return ret;
  }

  public line_info get_line_info(SWIGTYPE_p_line__offset offset) {
    line_info ret = new line_info(gpiodroidPINVOKE.chip_get_line_info(swigCPtr, SWIGTYPE_p_line__offset.getCPtr(offset)), true);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public line_info watch_line_info(SWIGTYPE_p_line__offset offset) {
    line_info ret = new line_info(gpiodroidPINVOKE.chip_watch_line_info(swigCPtr, SWIGTYPE_p_line__offset.getCPtr(offset)), true);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void unwatch_line_info(SWIGTYPE_p_line__offset offset) {
    gpiodroidPINVOKE.chip_unwatch_line_info(swigCPtr, SWIGTYPE_p_line__offset.getCPtr(offset));
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
  }

  public int fd() {
    int ret = gpiodroidPINVOKE.chip_fd(swigCPtr);
    return ret;
  }

  public bool wait_info_event(SWIGTYPE_p_std__chrono__nanoseconds timeout) {
    bool ret = gpiodroidPINVOKE.chip_wait_info_event(swigCPtr, SWIGTYPE_p_std__chrono__nanoseconds.getCPtr(timeout));
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public info_event read_info_event() {
    info_event ret = new info_event(gpiodroidPINVOKE.chip_read_info_event(swigCPtr), true);
    return ret;
  }

  public int get_line_offset_from_name(SWIGTYPE_p_std__string name) {
    int ret = gpiodroidPINVOKE.chip_get_line_offset_from_name(swigCPtr, SWIGTYPE_p_std__string.getCPtr(name));
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public request_builder prepare_request() {
    request_builder ret = new request_builder(gpiodroidPINVOKE.chip_prepare_request(swigCPtr), true);
    return ret;
  }

}

}
namespace gpiodroid {

public class edge_event_buffer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal edge_event_buffer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(edge_event_buffer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(edge_event_buffer obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~edge_event_buffer() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          gpiodroidPINVOKE.delete_edge_event_buffer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public edge_event_buffer(SWIGTYPE_p_std__size_t capacity) : this(gpiodroidPINVOKE.new_edge_event_buffer__SWIG_0(SWIGTYPE_p_std__size_t.getCPtr(capacity)), true) {
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
  }

  public edge_event_buffer() : this(gpiodroidPINVOKE.new_edge_event_buffer__SWIG_1(), true) {
  }

  public edge_event_buffer(edge_event_buffer other) : this(gpiodroidPINVOKE.new_edge_event_buffer__SWIG_2(edge_event_buffer.swigRelease(other)), true) {
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
  }

  public edge_event get_event(uint index) {
    edge_event ret = new edge_event(gpiodroidPINVOKE.edge_event_buffer_get_event(swigCPtr, index), false);
    return ret;
  }

  public SWIGTYPE_p_std__size_t num_events() {
    SWIGTYPE_p_std__size_t ret = new SWIGTYPE_p_std__size_t(gpiodroidPINVOKE.edge_event_buffer_num_events(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__size_t capacity() {
    SWIGTYPE_p_std__size_t ret = new SWIGTYPE_p_std__size_t(gpiodroidPINVOKE.edge_event_buffer_capacity(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_gpiod__edge_event_t__const_iterator begin() {
    SWIGTYPE_p_std__vectorT_gpiod__edge_event_t__const_iterator ret = new SWIGTYPE_p_std__vectorT_gpiod__edge_event_t__const_iterator(gpiodroidPINVOKE.edge_event_buffer_begin(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_gpiod__edge_event_t__const_iterator end() {
    SWIGTYPE_p_std__vectorT_gpiod__edge_event_t__const_iterator ret = new SWIGTYPE_p_std__vectorT_gpiod__edge_event_t__const_iterator(gpiodroidPINVOKE.edge_event_buffer_end(swigCPtr), true);
    return ret;
  }

}

}
namespace gpiodroid {

public class edge_event : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal edge_event(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(edge_event obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(edge_event obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~edge_event() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          gpiodroidPINVOKE.delete_edge_event(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public edge_event(edge_event other) : this(gpiodroidPINVOKE.new_edge_event__SWIG_0(edge_event.getCPtr(other)), true) {
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
  }

  public edge_event.event_type type() {
    edge_event.event_type ret = (edge_event.event_type)gpiodroidPINVOKE.edge_event_type(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_timestamp timestamp_ns() {
    SWIGTYPE_p_timestamp ret = new SWIGTYPE_p_timestamp(gpiodroidPINVOKE.edge_event_timestamp_ns(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_line__offset line_offset() {
    SWIGTYPE_p_line__offset ret = new SWIGTYPE_p_line__offset(gpiodroidPINVOKE.edge_event_line_offset(swigCPtr), true);
    return ret;
  }

  public uint global_seqno() {
    uint ret = gpiodroidPINVOKE.edge_event_global_seqno(swigCPtr);
    return ret;
  }

  public uint line_seqno() {
    uint ret = gpiodroidPINVOKE.edge_event_line_seqno(swigCPtr);
    return ret;
  }

  public enum event_type {
    RISING_EDGE = 1,
    FALLING_EDGE
  }

}

}
namespace gpiodroid {

public class chip_closed : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal chip_closed(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(chip_closed obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(chip_closed obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~chip_closed() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          gpiodroidPINVOKE.delete_chip_closed(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public chip_closed(SWIGTYPE_p_std__string what) : this(gpiodroidPINVOKE.new_chip_closed__SWIG_0(SWIGTYPE_p_std__string.getCPtr(what)), true) {
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
  }

  public chip_closed(chip_closed other) : this(gpiodroidPINVOKE.new_chip_closed__SWIG_1(chip_closed.getCPtr(other)), true) {
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace gpiodroid {

public class request_released : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal request_released(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(request_released obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(request_released obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~request_released() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          gpiodroidPINVOKE.delete_request_released(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public request_released(SWIGTYPE_p_std__string what) : this(gpiodroidPINVOKE.new_request_released__SWIG_0(SWIGTYPE_p_std__string.getCPtr(what)), true) {
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
  }

  public request_released(request_released other) : this(gpiodroidPINVOKE.new_request_released__SWIG_1(request_released.getCPtr(other)), true) {
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace gpiodroid {

public class bad_mapping : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal bad_mapping(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(bad_mapping obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(bad_mapping obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~bad_mapping() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          gpiodroidPINVOKE.delete_bad_mapping(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public bad_mapping(SWIGTYPE_p_std__string what) : this(gpiodroidPINVOKE.new_bad_mapping__SWIG_0(SWIGTYPE_p_std__string.getCPtr(what)), true) {
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
  }

  public bad_mapping(bad_mapping other) : this(gpiodroidPINVOKE.new_bad_mapping__SWIG_1(bad_mapping.getCPtr(other)), true) {
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace gpiodroid {

public class info_event : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal info_event(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(info_event obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(info_event obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~info_event() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          gpiodroidPINVOKE.delete_info_event(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public info_event(info_event other) : this(gpiodroidPINVOKE.new_info_event__SWIG_0(info_event.getCPtr(other)), true) {
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
  }

  public info_event.event_type type() {
    info_event.event_type ret = (info_event.event_type)gpiodroidPINVOKE.info_event_type(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__uint64_t timestamp_ns() {
    SWIGTYPE_p_std__uint64_t ret = new SWIGTYPE_p_std__uint64_t(gpiodroidPINVOKE.info_event_timestamp_ns(swigCPtr), true);
    return ret;
  }

  public line_info get_line_info() {
    line_info ret = new line_info(gpiodroidPINVOKE.info_event_get_line_info(swigCPtr), false);
    return ret;
  }

  public enum event_type {
    LINE_REQUESTED = 1,
    LINE_RELEASED,
    LINE_CONFIG_CHANGED
  }

}

}
namespace gpiodroid {

public class line_config : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal line_config(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(line_config obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(line_config obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~line_config() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          gpiodroidPINVOKE.delete_line_config(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public line_config() : this(gpiodroidPINVOKE.new_line_config__SWIG_0(), true) {
  }

  public line_config(line_config other) : this(gpiodroidPINVOKE.new_line_config__SWIG_1(line_config.swigRelease(other)), true) {
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
  }

  public line_config reset() {
    line_config ret = new line_config(gpiodroidPINVOKE.line_config_reset(swigCPtr), false);
    return ret;
  }

  public line_config add_line_settings(SWIGTYPE_p_line__offset offset, line_settings settings) {
    line_config ret = new line_config(gpiodroidPINVOKE.line_config_add_line_settings__SWIG_0(swigCPtr, SWIGTYPE_p_line__offset.getCPtr(offset), line_settings.getCPtr(settings)), false);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public line_config add_line_settings(SWIGTYPE_p_line__offsets offsets, line_settings settings) {
    line_config ret = new line_config(gpiodroidPINVOKE.line_config_add_line_settings__SWIG_1(swigCPtr, SWIGTYPE_p_line__offsets.getCPtr(offsets), line_settings.getCPtr(settings)), false);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public line_config set_output_values(SWIGTYPE_p_line__values values) {
    line_config ret = new line_config(gpiodroidPINVOKE.line_config_set_output_values(swigCPtr, SWIGTYPE_p_line__values.getCPtr(values)), false);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__mapT_line__offset_gpiod__line_settings_t get_line_settings() {
    SWIGTYPE_p_std__mapT_line__offset_gpiod__line_settings_t ret = new SWIGTYPE_p_std__mapT_line__offset_gpiod__line_settings_t(gpiodroidPINVOKE.line_config_get_line_settings(swigCPtr), true);
    return ret;
  }

}

}
namespace gpiodroid {

public class line_info : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal line_info(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(line_info obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(line_info obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~line_info() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          gpiodroidPINVOKE.delete_line_info(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public line_info(line_info other) : this(gpiodroidPINVOKE.new_line_info__SWIG_0(line_info.getCPtr(other)), true) {
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_line__offset offset() {
    SWIGTYPE_p_line__offset ret = new SWIGTYPE_p_line__offset(gpiodroidPINVOKE.line_info_offset(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__string name() {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(gpiodroidPINVOKE.line_info_name(swigCPtr), true);
    return ret;
  }

  public bool used() {
    bool ret = gpiodroidPINVOKE.line_info_used(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__string consumer() {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(gpiodroidPINVOKE.line_info_consumer(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_line__direction direction() {
    SWIGTYPE_p_line__direction ret = new SWIGTYPE_p_line__direction(gpiodroidPINVOKE.line_info_direction(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_line__edge edge_detection() {
    SWIGTYPE_p_line__edge ret = new SWIGTYPE_p_line__edge(gpiodroidPINVOKE.line_info_edge_detection(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_line__bias bias() {
    SWIGTYPE_p_line__bias ret = new SWIGTYPE_p_line__bias(gpiodroidPINVOKE.line_info_bias(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_line__drive drive() {
    SWIGTYPE_p_line__drive ret = new SWIGTYPE_p_line__drive(gpiodroidPINVOKE.line_info_drive(swigCPtr), true);
    return ret;
  }

  public bool active_low() {
    bool ret = gpiodroidPINVOKE.line_info_active_low(swigCPtr);
    return ret;
  }

  public bool debounced() {
    bool ret = gpiodroidPINVOKE.line_info_debounced(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__chrono__microseconds debounce_period() {
    SWIGTYPE_p_std__chrono__microseconds ret = new SWIGTYPE_p_std__chrono__microseconds(gpiodroidPINVOKE.line_info_debounce_period(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_line__clock event_clock() {
    SWIGTYPE_p_line__clock ret = new SWIGTYPE_p_line__clock(gpiodroidPINVOKE.line_info_event_clock(swigCPtr), true);
    return ret;
  }

}

}
namespace gpiodroid {

public class line_request : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal line_request(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(line_request obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(line_request obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~line_request() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          gpiodroidPINVOKE.delete_line_request(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public line_request(line_request other) : this(gpiodroidPINVOKE.new_line_request(line_request.swigRelease(other)), true) {
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
  }

  public void release() {
    gpiodroidPINVOKE.line_request_release(swigCPtr);
  }

  public SWIGTYPE_p_std__size_t num_lines() {
    SWIGTYPE_p_std__size_t ret = new SWIGTYPE_p_std__size_t(gpiodroidPINVOKE.line_request_num_lines(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_line__offsets offsets() {
    SWIGTYPE_p_line__offsets ret = new SWIGTYPE_p_line__offsets(gpiodroidPINVOKE.line_request_offsets(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_line__value get_value(SWIGTYPE_p_line__offset offset) {
    SWIGTYPE_p_line__value ret = new SWIGTYPE_p_line__value(gpiodroidPINVOKE.line_request_get_value(swigCPtr, SWIGTYPE_p_line__offset.getCPtr(offset)), true);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_line__values get_values(SWIGTYPE_p_line__offsets offsets) {
    SWIGTYPE_p_line__values ret = new SWIGTYPE_p_line__values(gpiodroidPINVOKE.line_request_get_values__SWIG_0(swigCPtr, SWIGTYPE_p_line__offsets.getCPtr(offsets)), true);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_line__values get_values() {
    SWIGTYPE_p_line__values ret = new SWIGTYPE_p_line__values(gpiodroidPINVOKE.line_request_get_values__SWIG_1(swigCPtr), true);
    return ret;
  }

  public void get_values(SWIGTYPE_p_line__offsets offsets, SWIGTYPE_p_line__values values) {
    gpiodroidPINVOKE.line_request_get_values__SWIG_2(swigCPtr, SWIGTYPE_p_line__offsets.getCPtr(offsets), SWIGTYPE_p_line__values.getCPtr(values));
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
  }

  public void get_values(SWIGTYPE_p_line__values values) {
    gpiodroidPINVOKE.line_request_get_values__SWIG_3(swigCPtr, SWIGTYPE_p_line__values.getCPtr(values));
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
  }

  public line_request set_value(SWIGTYPE_p_line__offset offset, SWIGTYPE_p_line__value value) {
    line_request ret = new line_request(gpiodroidPINVOKE.line_request_set_value(swigCPtr, SWIGTYPE_p_line__offset.getCPtr(offset), SWIGTYPE_p_line__value.getCPtr(value)), false);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public line_request set_values(SWIGTYPE_p_line__value_mappings values) {
    line_request ret = new line_request(gpiodroidPINVOKE.line_request_set_values__SWIG_0(swigCPtr, SWIGTYPE_p_line__value_mappings.getCPtr(values)), false);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public line_request set_values(SWIGTYPE_p_line__offsets offsets, SWIGTYPE_p_line__values values) {
    line_request ret = new line_request(gpiodroidPINVOKE.line_request_set_values__SWIG_1(swigCPtr, SWIGTYPE_p_line__offsets.getCPtr(offsets), SWIGTYPE_p_line__values.getCPtr(values)), false);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public line_request set_values(SWIGTYPE_p_line__values values) {
    line_request ret = new line_request(gpiodroidPINVOKE.line_request_set_values__SWIG_2(swigCPtr, SWIGTYPE_p_line__values.getCPtr(values)), false);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public line_request reconfigure_lines(line_config config) {
    line_request ret = new line_request(gpiodroidPINVOKE.line_request_reconfigure_lines(swigCPtr, line_config.getCPtr(config)), false);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int fd() {
    int ret = gpiodroidPINVOKE.line_request_fd(swigCPtr);
    return ret;
  }

  public bool wait_edge_events(SWIGTYPE_p_std__chrono__nanoseconds timeout) {
    bool ret = gpiodroidPINVOKE.line_request_wait_edge_events(swigCPtr, SWIGTYPE_p_std__chrono__nanoseconds.getCPtr(timeout));
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__size_t read_edge_events(edge_event_buffer buffer) {
    SWIGTYPE_p_std__size_t ret = new SWIGTYPE_p_std__size_t(gpiodroidPINVOKE.line_request_read_edge_events__SWIG_0(swigCPtr, edge_event_buffer.getCPtr(buffer)), true);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__size_t read_edge_events(edge_event_buffer buffer, SWIGTYPE_p_std__size_t max_events) {
    SWIGTYPE_p_std__size_t ret = new SWIGTYPE_p_std__size_t(gpiodroidPINVOKE.line_request_read_edge_events__SWIG_1(swigCPtr, edge_event_buffer.getCPtr(buffer), SWIGTYPE_p_std__size_t.getCPtr(max_events)), true);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace gpiodroid {

public class line_settings : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal line_settings(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(line_settings obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(line_settings obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~line_settings() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          gpiodroidPINVOKE.delete_line_settings(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public line_settings() : this(gpiodroidPINVOKE.new_line_settings__SWIG_0(), true) {
  }

  public line_settings(line_settings other) : this(gpiodroidPINVOKE.new_line_settings__SWIG_1(line_settings.getCPtr(other)), true) {
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
  }

  public line_settings reset() {
    line_settings ret = new line_settings(gpiodroidPINVOKE.line_settings_reset(swigCPtr), false);
    return ret;
  }

  public line_settings set_direction(SWIGTYPE_p_line__direction direction) {
    line_settings ret = new line_settings(gpiodroidPINVOKE.line_settings_set_direction(swigCPtr, SWIGTYPE_p_line__direction.getCPtr(direction)), false);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_line__direction direction() {
    SWIGTYPE_p_line__direction ret = new SWIGTYPE_p_line__direction(gpiodroidPINVOKE.line_settings_direction(swigCPtr), true);
    return ret;
  }

  public line_settings set_edge_detection(SWIGTYPE_p_line__edge edge) {
    line_settings ret = new line_settings(gpiodroidPINVOKE.line_settings_set_edge_detection(swigCPtr, SWIGTYPE_p_line__edge.getCPtr(edge)), false);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_line__edge edge_detection() {
    SWIGTYPE_p_line__edge ret = new SWIGTYPE_p_line__edge(gpiodroidPINVOKE.line_settings_edge_detection(swigCPtr), true);
    return ret;
  }

  public line_settings set_bias(SWIGTYPE_p_line__bias bias) {
    line_settings ret = new line_settings(gpiodroidPINVOKE.line_settings_set_bias(swigCPtr, SWIGTYPE_p_line__bias.getCPtr(bias)), false);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_line__bias bias() {
    SWIGTYPE_p_line__bias ret = new SWIGTYPE_p_line__bias(gpiodroidPINVOKE.line_settings_bias(swigCPtr), true);
    return ret;
  }

  public line_settings set_drive(SWIGTYPE_p_line__drive drive) {
    line_settings ret = new line_settings(gpiodroidPINVOKE.line_settings_set_drive(swigCPtr, SWIGTYPE_p_line__drive.getCPtr(drive)), false);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_line__drive drive() {
    SWIGTYPE_p_line__drive ret = new SWIGTYPE_p_line__drive(gpiodroidPINVOKE.line_settings_drive(swigCPtr), true);
    return ret;
  }

  public line_settings set_active_low(bool active_low) {
    line_settings ret = new line_settings(gpiodroidPINVOKE.line_settings_set_active_low(swigCPtr, active_low), false);
    return ret;
  }

  public bool active_low() {
    bool ret = gpiodroidPINVOKE.line_settings_active_low(swigCPtr);
    return ret;
  }

  public line_settings set_debounce_period(SWIGTYPE_p_std__chrono__microseconds period) {
    line_settings ret = new line_settings(gpiodroidPINVOKE.line_settings_set_debounce_period(swigCPtr, SWIGTYPE_p_std__chrono__microseconds.getCPtr(period)), false);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__chrono__microseconds debounce_period() {
    SWIGTYPE_p_std__chrono__microseconds ret = new SWIGTYPE_p_std__chrono__microseconds(gpiodroidPINVOKE.line_settings_debounce_period(swigCPtr), true);
    return ret;
  }

  public line_settings set_event_clock(SWIGTYPE_p_line__clock event_clock) {
    line_settings ret = new line_settings(gpiodroidPINVOKE.line_settings_set_event_clock(swigCPtr, SWIGTYPE_p_line__clock.getCPtr(event_clock)), false);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_line__clock event_clock() {
    SWIGTYPE_p_line__clock ret = new SWIGTYPE_p_line__clock(gpiodroidPINVOKE.line_settings_event_clock(swigCPtr), true);
    return ret;
  }

  public line_settings set_output_value(SWIGTYPE_p_line__value value) {
    line_settings ret = new line_settings(gpiodroidPINVOKE.line_settings_set_output_value(swigCPtr, SWIGTYPE_p_line__value.getCPtr(value)), false);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_line__value output_value() {
    SWIGTYPE_p_line__value ret = new SWIGTYPE_p_line__value(gpiodroidPINVOKE.line_settings_output_value(swigCPtr), true);
    return ret;
  }

}

}
namespace gpiodroid {

public class offset : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal offset(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(offset obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(offset obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~offset() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          gpiodroidPINVOKE.delete_offset(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public offset(uint off) : this(gpiodroidPINVOKE.new_offset__SWIG_0(off), true) {
  }

  public offset() : this(gpiodroidPINVOKE.new_offset__SWIG_1(), true) {
  }

  public offset(offset other) : this(gpiodroidPINVOKE.new_offset__SWIG_2(offset.getCPtr(other)), true) {
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace gpiodroid {

public enum value {
  INACTIVE = 0,
  ACTIVE = 1
}

}
namespace gpiodroid {

public enum direction {
  AS_IS = 1,
  INPUT,
  OUTPUT
}

}
namespace gpiodroid {

public enum edge {
  NONE = 1,
  RISING,
  FALLING,
  BOTH
}

}
namespace gpiodroid {

public enum bias {
  AS_IS = 1,
  UNKNOWN,
  DISABLED,
  PULL_UP,
  PULL_DOWN
}

}
namespace gpiodroid {

public enum drive {
  PUSH_PULL = 1,
  OPEN_DRAIN,
  OPEN_SOURCE
}

}
namespace gpiodroid {

public enum clock {
  MONOTONIC = 1,
  REALTIME,
  HTE
}

}
namespace gpiodroid {

public class request_builder : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal request_builder(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(request_builder obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(request_builder obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~request_builder() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          gpiodroidPINVOKE.delete_request_builder(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public request_builder(request_builder other) : this(gpiodroidPINVOKE.new_request_builder(request_builder.swigRelease(other)), true) {
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
  }

  public request_builder set_request_config(request_config req_cfg) {
    request_builder ret = new request_builder(gpiodroidPINVOKE.request_builder_set_request_config(swigCPtr, request_config.getCPtr(req_cfg)), false);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public request_config get_request_config() {
    request_config ret = new request_config(gpiodroidPINVOKE.request_builder_get_request_config(swigCPtr), false);
    return ret;
  }

  public request_builder set_consumer(SWIGTYPE_p_std__string consumer) {
    request_builder ret = new request_builder(gpiodroidPINVOKE.request_builder_set_consumer(swigCPtr, SWIGTYPE_p_std__string.getCPtr(consumer)), false);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public request_builder set_event_buffer_size(SWIGTYPE_p_std__size_t event_buffer_size) {
    request_builder ret = new request_builder(gpiodroidPINVOKE.request_builder_set_event_buffer_size(swigCPtr, SWIGTYPE_p_std__size_t.getCPtr(event_buffer_size)), false);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public request_builder set_line_config(line_config line_cfg) {
    request_builder ret = new request_builder(gpiodroidPINVOKE.request_builder_set_line_config(swigCPtr, line_config.getCPtr(line_cfg)), false);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public line_config get_line_config() {
    line_config ret = new line_config(gpiodroidPINVOKE.request_builder_get_line_config(swigCPtr), false);
    return ret;
  }

  public request_builder add_line_settings(offset offset, line_settings settings) {
    request_builder ret = new request_builder(gpiodroidPINVOKE.request_builder_add_line_settings__SWIG_0(swigCPtr, offset.getCPtr(offset), line_settings.getCPtr(settings)), false);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public request_builder add_line_settings(SWIGTYPE_p_std__vectorT_gpiod__line__offset_t offsets, line_settings settings) {
    request_builder ret = new request_builder(gpiodroidPINVOKE.request_builder_add_line_settings__SWIG_1(swigCPtr, SWIGTYPE_p_std__vectorT_gpiod__line__offset_t.getCPtr(offsets), line_settings.getCPtr(settings)), false);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public line_request do_request() {
    line_request ret = new line_request(gpiodroidPINVOKE.request_builder_do_request(swigCPtr), true);
    return ret;
  }

}

}
namespace gpiodroid {

public class request_config : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal request_config(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(request_config obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(request_config obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~request_config() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          gpiodroidPINVOKE.delete_request_config(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public request_config() : this(gpiodroidPINVOKE.new_request_config__SWIG_0(), true) {
  }

  public request_config(request_config other) : this(gpiodroidPINVOKE.new_request_config__SWIG_1(request_config.swigRelease(other)), true) {
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
  }

  public request_config set_consumer(SWIGTYPE_p_std__string consumer) {
    request_config ret = new request_config(gpiodroidPINVOKE.request_config_set_consumer(swigCPtr, SWIGTYPE_p_std__string.getCPtr(consumer)), false);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__string consumer() {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(gpiodroidPINVOKE.request_config_consumer(swigCPtr), true);
    return ret;
  }

  public request_config set_event_buffer_size(SWIGTYPE_p_std__size_t event_buffer_size) {
    request_config ret = new request_config(gpiodroidPINVOKE.request_config_set_event_buffer_size(swigCPtr, SWIGTYPE_p_std__size_t.getCPtr(event_buffer_size)), false);
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__size_t event_buffer_size() {
    SWIGTYPE_p_std__size_t ret = new SWIGTYPE_p_std__size_t(gpiodroidPINVOKE.request_config_event_buffer_size(swigCPtr), true);
    return ret;
  }

}

}
namespace gpiodroid {

public class timestamp : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal timestamp(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(timestamp obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(timestamp obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~timestamp() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          gpiodroidPINVOKE.delete_timestamp(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public timestamp() : this(gpiodroidPINVOKE.new_timestamp__SWIG_0(), true) {
  }

  public timestamp(SWIGTYPE_p_std__uint64_t ns) : this(gpiodroidPINVOKE.new_timestamp__SWIG_1(SWIGTYPE_p_std__uint64_t.getCPtr(ns)), true) {
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
  }

  public timestamp(timestamp other) : this(gpiodroidPINVOKE.new_timestamp__SWIG_2(timestamp.getCPtr(other)), true) {
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__uint64_t ns() {
    SWIGTYPE_p_std__uint64_t ret = new SWIGTYPE_p_std__uint64_t(gpiodroidPINVOKE.timestamp_ns(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__chrono__time_pointT_std__chrono__steady_clock_t to_time_point_monotonic() {
    SWIGTYPE_p_std__chrono__time_pointT_std__chrono__steady_clock_t ret = new SWIGTYPE_p_std__chrono__time_pointT_std__chrono__steady_clock_t(gpiodroidPINVOKE.timestamp_to_time_point_monotonic(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__chrono__time_pointT_std__chrono__system_clock___std__chrono__nanoseconds_t to_time_point_realtime() {
    SWIGTYPE_p_std__chrono__time_pointT_std__chrono__system_clock___std__chrono__nanoseconds_t ret = new SWIGTYPE_p_std__chrono__time_pointT_std__chrono__system_clock___std__chrono__nanoseconds_t(gpiodroidPINVOKE.timestamp_to_time_point_realtime(swigCPtr), true);
    return ret;
  }

}

}
namespace gpiodroid {

class gpiodroidPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="SWIGRegisterExceptionCallbacks_gpiodroid")]
    public static extern void SWIGRegisterExceptionCallbacks_gpiodroid(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_gpiodroid")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_gpiodroid(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_gpiodroid(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_gpiodroid(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;
    private static global::System.Object exceptionsLock = null;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(exceptionsLock) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(exceptionsLock) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }

    static SWIGPendingException() {
      exceptionsLock = new global::System.Object();
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="SWIGRegisterStringCallback_gpiodroid")]
    public static extern void SWIGRegisterStringCallback_gpiodroid(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_gpiodroid(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static gpiodroidPINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_chip_info__SWIG_0")]
  public static extern global::System.IntPtr new_chip_info__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_delete_chip_info")]
  public static extern void delete_chip_info(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_chip_info_name")]
  public static extern global::System.IntPtr chip_info_name(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_chip_info_label")]
  public static extern global::System.IntPtr chip_info_label(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_chip_info_num_lines")]
  public static extern global::System.IntPtr chip_info_num_lines(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_chip__SWIG_0")]
  public static extern global::System.IntPtr new_chip__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_chip__SWIG_1")]
  public static extern global::System.IntPtr new_chip__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_delete_chip")]
  public static extern void delete_chip(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_chip_close")]
  public static extern void chip_close(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_chip_path")]
  public static extern global::System.IntPtr chip_path(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_chip_get_info")]
  public static extern global::System.IntPtr chip_get_info(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_chip_get_line_info")]
  public static extern global::System.IntPtr chip_get_line_info(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_chip_watch_line_info")]
  public static extern global::System.IntPtr chip_watch_line_info(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_chip_unwatch_line_info")]
  public static extern void chip_unwatch_line_info(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_chip_fd")]
  public static extern int chip_fd(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_chip_wait_info_event")]
  public static extern bool chip_wait_info_event(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_chip_read_info_event")]
  public static extern global::System.IntPtr chip_read_info_event(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_chip_get_line_offset_from_name")]
  public static extern int chip_get_line_offset_from_name(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_chip_prepare_request")]
  public static extern global::System.IntPtr chip_prepare_request(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_edge_event_buffer__SWIG_0")]
  public static extern global::System.IntPtr new_edge_event_buffer__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_edge_event_buffer__SWIG_1")]
  public static extern global::System.IntPtr new_edge_event_buffer__SWIG_1();

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_edge_event_buffer__SWIG_2")]
  public static extern global::System.IntPtr new_edge_event_buffer__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_delete_edge_event_buffer")]
  public static extern void delete_edge_event_buffer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_edge_event_buffer_get_event")]
  public static extern global::System.IntPtr edge_event_buffer_get_event(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_edge_event_buffer_num_events")]
  public static extern global::System.IntPtr edge_event_buffer_num_events(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_edge_event_buffer_capacity")]
  public static extern global::System.IntPtr edge_event_buffer_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_edge_event_buffer_begin")]
  public static extern global::System.IntPtr edge_event_buffer_begin(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_edge_event_buffer_end")]
  public static extern global::System.IntPtr edge_event_buffer_end(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_edge_event__SWIG_0")]
  public static extern global::System.IntPtr new_edge_event__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_delete_edge_event")]
  public static extern void delete_edge_event(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_edge_event_type")]
  public static extern int edge_event_type(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_edge_event_timestamp_ns")]
  public static extern global::System.IntPtr edge_event_timestamp_ns(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_edge_event_line_offset")]
  public static extern global::System.IntPtr edge_event_line_offset(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_edge_event_global_seqno")]
  public static extern uint edge_event_global_seqno(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_edge_event_line_seqno")]
  public static extern uint edge_event_line_seqno(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_chip_closed__SWIG_0")]
  public static extern global::System.IntPtr new_chip_closed__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_chip_closed__SWIG_1")]
  public static extern global::System.IntPtr new_chip_closed__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_delete_chip_closed")]
  public static extern void delete_chip_closed(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_request_released__SWIG_0")]
  public static extern global::System.IntPtr new_request_released__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_request_released__SWIG_1")]
  public static extern global::System.IntPtr new_request_released__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_delete_request_released")]
  public static extern void delete_request_released(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_bad_mapping__SWIG_0")]
  public static extern global::System.IntPtr new_bad_mapping__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_bad_mapping__SWIG_1")]
  public static extern global::System.IntPtr new_bad_mapping__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_delete_bad_mapping")]
  public static extern void delete_bad_mapping(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_info_event__SWIG_0")]
  public static extern global::System.IntPtr new_info_event__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_delete_info_event")]
  public static extern void delete_info_event(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_info_event_type")]
  public static extern int info_event_type(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_info_event_timestamp_ns")]
  public static extern global::System.IntPtr info_event_timestamp_ns(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_info_event_get_line_info")]
  public static extern global::System.IntPtr info_event_get_line_info(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_line_config__SWIG_0")]
  public static extern global::System.IntPtr new_line_config__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_line_config__SWIG_1")]
  public static extern global::System.IntPtr new_line_config__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_delete_line_config")]
  public static extern void delete_line_config(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_config_reset")]
  public static extern global::System.IntPtr line_config_reset(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_config_add_line_settings__SWIG_0")]
  public static extern global::System.IntPtr line_config_add_line_settings__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_config_add_line_settings__SWIG_1")]
  public static extern global::System.IntPtr line_config_add_line_settings__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_config_set_output_values")]
  public static extern global::System.IntPtr line_config_set_output_values(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_config_get_line_settings")]
  public static extern global::System.IntPtr line_config_get_line_settings(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_line_info__SWIG_0")]
  public static extern global::System.IntPtr new_line_info__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_delete_line_info")]
  public static extern void delete_line_info(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_info_offset")]
  public static extern global::System.IntPtr line_info_offset(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_info_name")]
  public static extern global::System.IntPtr line_info_name(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_info_used")]
  public static extern bool line_info_used(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_info_consumer")]
  public static extern global::System.IntPtr line_info_consumer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_info_direction")]
  public static extern global::System.IntPtr line_info_direction(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_info_edge_detection")]
  public static extern global::System.IntPtr line_info_edge_detection(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_info_bias")]
  public static extern global::System.IntPtr line_info_bias(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_info_drive")]
  public static extern global::System.IntPtr line_info_drive(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_info_active_low")]
  public static extern bool line_info_active_low(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_info_debounced")]
  public static extern bool line_info_debounced(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_info_debounce_period")]
  public static extern global::System.IntPtr line_info_debounce_period(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_info_event_clock")]
  public static extern global::System.IntPtr line_info_event_clock(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_line_request")]
  public static extern global::System.IntPtr new_line_request(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_delete_line_request")]
  public static extern void delete_line_request(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_request_release")]
  public static extern void line_request_release(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_request_num_lines")]
  public static extern global::System.IntPtr line_request_num_lines(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_request_offsets")]
  public static extern global::System.IntPtr line_request_offsets(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_request_get_value")]
  public static extern global::System.IntPtr line_request_get_value(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_request_get_values__SWIG_0")]
  public static extern global::System.IntPtr line_request_get_values__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_request_get_values__SWIG_1")]
  public static extern global::System.IntPtr line_request_get_values__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_request_get_values__SWIG_2")]
  public static extern void line_request_get_values__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_request_get_values__SWIG_3")]
  public static extern void line_request_get_values__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_request_set_value")]
  public static extern global::System.IntPtr line_request_set_value(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_request_set_values__SWIG_0")]
  public static extern global::System.IntPtr line_request_set_values__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_request_set_values__SWIG_1")]
  public static extern global::System.IntPtr line_request_set_values__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_request_set_values__SWIG_2")]
  public static extern global::System.IntPtr line_request_set_values__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_request_reconfigure_lines")]
  public static extern global::System.IntPtr line_request_reconfigure_lines(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_request_fd")]
  public static extern int line_request_fd(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_request_wait_edge_events")]
  public static extern bool line_request_wait_edge_events(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_request_read_edge_events__SWIG_0")]
  public static extern global::System.IntPtr line_request_read_edge_events__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_request_read_edge_events__SWIG_1")]
  public static extern global::System.IntPtr line_request_read_edge_events__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_line_settings__SWIG_0")]
  public static extern global::System.IntPtr new_line_settings__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_line_settings__SWIG_1")]
  public static extern global::System.IntPtr new_line_settings__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_delete_line_settings")]
  public static extern void delete_line_settings(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_settings_reset")]
  public static extern global::System.IntPtr line_settings_reset(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_settings_set_direction")]
  public static extern global::System.IntPtr line_settings_set_direction(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_settings_direction")]
  public static extern global::System.IntPtr line_settings_direction(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_settings_set_edge_detection")]
  public static extern global::System.IntPtr line_settings_set_edge_detection(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_settings_edge_detection")]
  public static extern global::System.IntPtr line_settings_edge_detection(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_settings_set_bias")]
  public static extern global::System.IntPtr line_settings_set_bias(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_settings_bias")]
  public static extern global::System.IntPtr line_settings_bias(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_settings_set_drive")]
  public static extern global::System.IntPtr line_settings_set_drive(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_settings_drive")]
  public static extern global::System.IntPtr line_settings_drive(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_settings_set_active_low")]
  public static extern global::System.IntPtr line_settings_set_active_low(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_settings_active_low")]
  public static extern bool line_settings_active_low(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_settings_set_debounce_period")]
  public static extern global::System.IntPtr line_settings_set_debounce_period(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_settings_debounce_period")]
  public static extern global::System.IntPtr line_settings_debounce_period(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_settings_set_event_clock")]
  public static extern global::System.IntPtr line_settings_set_event_clock(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_settings_event_clock")]
  public static extern global::System.IntPtr line_settings_event_clock(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_settings_set_output_value")]
  public static extern global::System.IntPtr line_settings_set_output_value(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_line_settings_output_value")]
  public static extern global::System.IntPtr line_settings_output_value(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_offset__SWIG_0")]
  public static extern global::System.IntPtr new_offset__SWIG_0(uint jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_offset__SWIG_1")]
  public static extern global::System.IntPtr new_offset__SWIG_1();

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_offset__SWIG_2")]
  public static extern global::System.IntPtr new_offset__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_delete_offset")]
  public static extern void delete_offset(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_is_gpiochip_device")]
  public static extern bool is_gpiochip_device(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_api_version")]
  public static extern global::System.IntPtr api_version();

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_request_builder")]
  public static extern global::System.IntPtr new_request_builder(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_delete_request_builder")]
  public static extern void delete_request_builder(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_request_builder_set_request_config")]
  public static extern global::System.IntPtr request_builder_set_request_config(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_request_builder_get_request_config")]
  public static extern global::System.IntPtr request_builder_get_request_config(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_request_builder_set_consumer")]
  public static extern global::System.IntPtr request_builder_set_consumer(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_request_builder_set_event_buffer_size")]
  public static extern global::System.IntPtr request_builder_set_event_buffer_size(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_request_builder_set_line_config")]
  public static extern global::System.IntPtr request_builder_set_line_config(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_request_builder_get_line_config")]
  public static extern global::System.IntPtr request_builder_get_line_config(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_request_builder_add_line_settings__SWIG_0")]
  public static extern global::System.IntPtr request_builder_add_line_settings__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_request_builder_add_line_settings__SWIG_1")]
  public static extern global::System.IntPtr request_builder_add_line_settings__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_request_builder_do_request")]
  public static extern global::System.IntPtr request_builder_do_request(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_request_config__SWIG_0")]
  public static extern global::System.IntPtr new_request_config__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_request_config__SWIG_1")]
  public static extern global::System.IntPtr new_request_config__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_delete_request_config")]
  public static extern void delete_request_config(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_request_config_set_consumer")]
  public static extern global::System.IntPtr request_config_set_consumer(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_request_config_consumer")]
  public static extern global::System.IntPtr request_config_consumer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_request_config_set_event_buffer_size")]
  public static extern global::System.IntPtr request_config_set_event_buffer_size(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_request_config_event_buffer_size")]
  public static extern global::System.IntPtr request_config_event_buffer_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_timestamp__SWIG_0")]
  public static extern global::System.IntPtr new_timestamp__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_timestamp__SWIG_1")]
  public static extern global::System.IntPtr new_timestamp__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_new_timestamp__SWIG_2")]
  public static extern global::System.IntPtr new_timestamp__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_delete_timestamp")]
  public static extern void delete_timestamp(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_timestamp_ns")]
  public static extern global::System.IntPtr timestamp_ns(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_timestamp_to_time_point_monotonic")]
  public static extern global::System.IntPtr timestamp_to_time_point_monotonic(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libgpiodroid", EntryPoint="CSharp_gpiodroid_timestamp_to_time_point_realtime")]
  public static extern global::System.IntPtr timestamp_to_time_point_realtime(global::System.Runtime.InteropServices.HandleRef jarg1);
}

}
namespace gpiodroid {

public class gpiodroid {
  public static bool is_gpiochip_device(SWIGTYPE_p_std__filesystem__path path) {
    bool ret = gpiodroidPINVOKE.is_gpiochip_device(SWIGTYPE_p_std__filesystem__path.getCPtr(path));
    if (gpiodroidPINVOKE.SWIGPendingException.Pending) throw gpiodroidPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__string api_version() {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(gpiodroidPINVOKE.api_version(), false);
    return ret;
  }

}

}
namespace gpiodroid {

public class SWIGTYPE_p_std__vectorT_gpiod__line__offset_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_gpiod__line__offset_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_gpiod__line__offset_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_gpiod__line__offset_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_gpiod__line__offset_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace gpiodroid {

public class SWIGTYPE_p_line__offset {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_line__offset(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_line__offset() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_line__offset obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_line__offset obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace gpiodroid {

public class SWIGTYPE_p_line__values {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_line__values(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_line__values() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_line__values obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_line__values obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace gpiodroid {

public class SWIGTYPE_p_std__string {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__string(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__string() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__string obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__string obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace gpiodroid {

public class SWIGTYPE_p_std__mapT_line__offset_gpiod__line_settings_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__mapT_line__offset_gpiod__line_settings_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__mapT_line__offset_gpiod__line_settings_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__mapT_line__offset_gpiod__line_settings_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__mapT_line__offset_gpiod__line_settings_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace gpiodroid {

public class SWIGTYPE_p_std__chrono__nanoseconds {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__chrono__nanoseconds(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__chrono__nanoseconds() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__chrono__nanoseconds obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__chrono__nanoseconds obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace gpiodroid {

public class SWIGTYPE_p_std__chrono__microseconds {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__chrono__microseconds(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__chrono__microseconds() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__chrono__microseconds obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__chrono__microseconds obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace gpiodroid {

public class SWIGTYPE_p_std__size_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__size_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__size_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__size_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__size_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace gpiodroid {

public class SWIGTYPE_p_line__drive {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_line__drive(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_line__drive() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_line__drive obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_line__drive obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace gpiodroid {

public class SWIGTYPE_p_line__offsets {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_line__offsets(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_line__offsets() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_line__offsets obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_line__offsets obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace gpiodroid {

public class SWIGTYPE_p_std__vectorT_gpiod__edge_event_t__const_iterator {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_gpiod__edge_event_t__const_iterator(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_gpiod__edge_event_t__const_iterator() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_gpiod__edge_event_t__const_iterator obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_gpiod__edge_event_t__const_iterator obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace gpiodroid {

public class SWIGTYPE_p_line__clock {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_line__clock(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_line__clock() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_line__clock obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_line__clock obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace gpiodroid {

public class SWIGTYPE_p_line__bias {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_line__bias(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_line__bias() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_line__bias obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_line__bias obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace gpiodroid {

public class SWIGTYPE_p_std__filesystem__path {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__filesystem__path(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__filesystem__path() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__filesystem__path obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__filesystem__path obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace gpiodroid {

public class SWIGTYPE_p_timestamp {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_timestamp(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_timestamp() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_timestamp obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_timestamp obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace gpiodroid {

public class SWIGTYPE_p_line__value {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_line__value(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_line__value() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_line__value obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_line__value obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace gpiodroid {

public class SWIGTYPE_p_line__direction {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_line__direction(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_line__direction() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_line__direction obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_line__direction obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace gpiodroid {

public class SWIGTYPE_p_std__chrono__time_pointT_std__chrono__steady_clock_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__chrono__time_pointT_std__chrono__steady_clock_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__chrono__time_pointT_std__chrono__steady_clock_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__chrono__time_pointT_std__chrono__steady_clock_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__chrono__time_pointT_std__chrono__steady_clock_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace gpiodroid {

public class SWIGTYPE_p_std__chrono__time_pointT_std__chrono__system_clock___std__chrono__nanoseconds_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__chrono__time_pointT_std__chrono__system_clock___std__chrono__nanoseconds_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__chrono__time_pointT_std__chrono__system_clock___std__chrono__nanoseconds_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__chrono__time_pointT_std__chrono__system_clock___std__chrono__nanoseconds_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__chrono__time_pointT_std__chrono__system_clock___std__chrono__nanoseconds_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace gpiodroid {

public class SWIGTYPE_p_std__uint64_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__uint64_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__uint64_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__uint64_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__uint64_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace gpiodroid {

public class SWIGTYPE_p_line__edge {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_line__edge(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_line__edge() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_line__edge obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_line__edge obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace gpiodroid {

public class SWIGTYPE_p_line__value_mappings {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_line__value_mappings(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_line__value_mappings() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_line__value_mappings obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_line__value_mappings obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
