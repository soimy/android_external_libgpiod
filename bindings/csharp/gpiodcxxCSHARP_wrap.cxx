/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGCSHARP

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_gpiodroid(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_gpiodroid(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_gpiodroid(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include "gpiod.hpp"
using namespace gpiod;


#include <memory>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_chip_info__SWIG_0(void * jarg1) {
  void * jresult ;
  gpiod::chip_info *arg1 = 0 ;
  gpiod::chip_info *result = 0 ;
  
  arg1 = (gpiod::chip_info *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::chip_info const & is null", 0);
    return 0;
  } 
  result = (gpiod::chip_info *)new gpiod::chip_info((gpiod::chip_info const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpiodroid_delete_chip_info(void * jarg1) {
  gpiod::chip_info *arg1 = (gpiod::chip_info *) 0 ;
  
  arg1 = (gpiod::chip_info *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_chip_info_name(void * jarg1) {
  void * jresult ;
  gpiod::chip_info *arg1 = (gpiod::chip_info *) 0 ;
  ::std::string result;
  
  arg1 = (gpiod::chip_info *)jarg1; 
  result = ((gpiod::chip_info const *)arg1)->name();
  jresult = new ::std::string(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_chip_info_label(void * jarg1) {
  void * jresult ;
  gpiod::chip_info *arg1 = (gpiod::chip_info *) 0 ;
  ::std::string result;
  
  arg1 = (gpiod::chip_info *)jarg1; 
  result = ((gpiod::chip_info const *)arg1)->label();
  jresult = new ::std::string(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_chip_info_num_lines(void * jarg1) {
  void * jresult ;
  gpiod::chip_info *arg1 = (gpiod::chip_info *) 0 ;
  ::std::size_t result;
  
  arg1 = (gpiod::chip_info *)jarg1; 
  result = ((gpiod::chip_info const *)arg1)->num_lines();
  jresult = new ::std::size_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_chip__SWIG_0(void * jarg1) {
  void * jresult ;
  ::std::filesystem::path *arg1 = 0 ;
  gpiod::chip *result = 0 ;
  
  arg1 = (::std::filesystem::path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "::std::filesystem::path const & is null", 0);
    return 0;
  } 
  result = (gpiod::chip *)new gpiod::chip((::std::filesystem::path const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_chip__SWIG_1(void * jarg1) {
  void * jresult ;
  gpiod::chip *arg1 = 0 ;
  std::unique_ptr< gpiod::chip > rvrdeleter1 ;
  gpiod::chip *result = 0 ;
  
  arg1 = (gpiod::chip *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::chip && is null", 0);
    return 0;
  }
  rvrdeleter1.reset(arg1); 
  result = (gpiod::chip *)new gpiod::chip((gpiod::chip &&)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpiodroid_delete_chip(void * jarg1) {
  gpiod::chip *arg1 = (gpiod::chip *) 0 ;
  
  arg1 = (gpiod::chip *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpiodroid_chip_close(void * jarg1) {
  gpiod::chip *arg1 = (gpiod::chip *) 0 ;
  
  arg1 = (gpiod::chip *)jarg1; 
  (arg1)->close();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_chip_path(void * jarg1) {
  void * jresult ;
  gpiod::chip *arg1 = (gpiod::chip *) 0 ;
  ::std::filesystem::path result;
  
  arg1 = (gpiod::chip *)jarg1; 
  result = ((gpiod::chip const *)arg1)->path();
  jresult = new ::std::filesystem::path(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_chip_get_info(void * jarg1) {
  void * jresult ;
  gpiod::chip *arg1 = (gpiod::chip *) 0 ;
  SwigValueWrapper< gpiod::chip_info > result;
  
  arg1 = (gpiod::chip *)jarg1; 
  result = ((gpiod::chip const *)arg1)->get_info();
  jresult = new gpiod::chip_info(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_chip_get_line_info(void * jarg1, void * jarg2) {
  void * jresult ;
  gpiod::chip *arg1 = (gpiod::chip *) 0 ;
  line::offset arg2 ;
  line::offset *argp2 ;
  SwigValueWrapper< gpiod::line_info > result;
  
  arg1 = (gpiod::chip *)jarg1; 
  argp2 = (line::offset *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null line::offset", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((gpiod::chip const *)arg1)->get_line_info(arg2);
  jresult = new gpiod::line_info(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_chip_watch_line_info(void * jarg1, void * jarg2) {
  void * jresult ;
  gpiod::chip *arg1 = (gpiod::chip *) 0 ;
  line::offset arg2 ;
  line::offset *argp2 ;
  SwigValueWrapper< gpiod::line_info > result;
  
  arg1 = (gpiod::chip *)jarg1; 
  argp2 = (line::offset *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null line::offset", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((gpiod::chip const *)arg1)->watch_line_info(arg2);
  jresult = new gpiod::line_info(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpiodroid_chip_unwatch_line_info(void * jarg1, void * jarg2) {
  gpiod::chip *arg1 = (gpiod::chip *) 0 ;
  line::offset arg2 ;
  line::offset *argp2 ;
  
  arg1 = (gpiod::chip *)jarg1; 
  argp2 = (line::offset *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null line::offset", 0);
    return ;
  }
  arg2 = *argp2; 
  ((gpiod::chip const *)arg1)->unwatch_line_info(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_gpiodroid_chip_fd(void * jarg1) {
  int jresult ;
  gpiod::chip *arg1 = (gpiod::chip *) 0 ;
  int result;
  
  arg1 = (gpiod::chip *)jarg1; 
  result = (int)((gpiod::chip const *)arg1)->fd();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gpiodroid_chip_wait_info_event(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  gpiod::chip *arg1 = (gpiod::chip *) 0 ;
  ::std::chrono::nanoseconds *arg2 = 0 ;
  bool result;
  
  arg1 = (gpiod::chip *)jarg1; 
  arg2 = (::std::chrono::nanoseconds *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "::std::chrono::nanoseconds const & is null", 0);
    return 0;
  } 
  result = (bool)((gpiod::chip const *)arg1)->wait_info_event((::std::chrono::nanoseconds const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_chip_read_info_event(void * jarg1) {
  void * jresult ;
  gpiod::chip *arg1 = (gpiod::chip *) 0 ;
  SwigValueWrapper< gpiod::info_event > result;
  
  arg1 = (gpiod::chip *)jarg1; 
  result = ((gpiod::chip const *)arg1)->read_info_event();
  jresult = new gpiod::info_event(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_gpiodroid_chip_get_line_offset_from_name(void * jarg1, void * jarg2) {
  int jresult ;
  gpiod::chip *arg1 = (gpiod::chip *) 0 ;
  ::std::string *arg2 = 0 ;
  int result;
  
  arg1 = (gpiod::chip *)jarg1; 
  arg2 = (::std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "::std::string const & is null", 0);
    return 0;
  } 
  result = (int)((gpiod::chip const *)arg1)->get_line_offset_from_name((::std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_chip_prepare_request(void * jarg1) {
  void * jresult ;
  gpiod::chip *arg1 = (gpiod::chip *) 0 ;
  SwigValueWrapper< gpiod::request_builder > result;
  
  arg1 = (gpiod::chip *)jarg1; 
  result = (arg1)->prepare_request();
  jresult = new gpiod::request_builder(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_edge_event_buffer__SWIG_0(void * jarg1) {
  void * jresult ;
  ::std::size_t arg1 ;
  ::std::size_t *argp1 ;
  gpiod::edge_event_buffer *result = 0 ;
  
  argp1 = (::std::size_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ::std::size_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (gpiod::edge_event_buffer *)new gpiod::edge_event_buffer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_edge_event_buffer__SWIG_1() {
  void * jresult ;
  gpiod::edge_event_buffer *result = 0 ;
  
  result = (gpiod::edge_event_buffer *)new gpiod::edge_event_buffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_edge_event_buffer__SWIG_2(void * jarg1) {
  void * jresult ;
  gpiod::edge_event_buffer *arg1 = 0 ;
  std::unique_ptr< gpiod::edge_event_buffer > rvrdeleter1 ;
  gpiod::edge_event_buffer *result = 0 ;
  
  arg1 = (gpiod::edge_event_buffer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::edge_event_buffer && is null", 0);
    return 0;
  }
  rvrdeleter1.reset(arg1); 
  result = (gpiod::edge_event_buffer *)new gpiod::edge_event_buffer((gpiod::edge_event_buffer &&)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpiodroid_delete_edge_event_buffer(void * jarg1) {
  gpiod::edge_event_buffer *arg1 = (gpiod::edge_event_buffer *) 0 ;
  
  arg1 = (gpiod::edge_event_buffer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_edge_event_buffer_get_event(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  gpiod::edge_event_buffer *arg1 = (gpiod::edge_event_buffer *) 0 ;
  unsigned int arg2 ;
  gpiod::edge_event *result = 0 ;
  
  arg1 = (gpiod::edge_event_buffer *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (gpiod::edge_event *) &((gpiod::edge_event_buffer const *)arg1)->get_event(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_edge_event_buffer_num_events(void * jarg1) {
  void * jresult ;
  gpiod::edge_event_buffer *arg1 = (gpiod::edge_event_buffer *) 0 ;
  ::std::size_t result;
  
  arg1 = (gpiod::edge_event_buffer *)jarg1; 
  result = ((gpiod::edge_event_buffer const *)arg1)->num_events();
  jresult = new ::std::size_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_edge_event_buffer_capacity(void * jarg1) {
  void * jresult ;
  gpiod::edge_event_buffer *arg1 = (gpiod::edge_event_buffer *) 0 ;
  ::std::size_t result;
  
  arg1 = (gpiod::edge_event_buffer *)jarg1; 
  result = ((gpiod::edge_event_buffer const *)arg1)->capacity();
  jresult = new ::std::size_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_edge_event_buffer_begin(void * jarg1) {
  void * jresult ;
  gpiod::edge_event_buffer *arg1 = (gpiod::edge_event_buffer *) 0 ;
  SwigValueWrapper< ::std::vector< gpiod::edge_event >::const_iterator > result;
  
  arg1 = (gpiod::edge_event_buffer *)jarg1; 
  result = ((gpiod::edge_event_buffer const *)arg1)->begin();
  jresult = new gpiod::edge_event_buffer::const_iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_edge_event_buffer_end(void * jarg1) {
  void * jresult ;
  gpiod::edge_event_buffer *arg1 = (gpiod::edge_event_buffer *) 0 ;
  SwigValueWrapper< ::std::vector< gpiod::edge_event >::const_iterator > result;
  
  arg1 = (gpiod::edge_event_buffer *)jarg1; 
  result = ((gpiod::edge_event_buffer const *)arg1)->end();
  jresult = new gpiod::edge_event_buffer::const_iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_edge_event__SWIG_0(void * jarg1) {
  void * jresult ;
  gpiod::edge_event *arg1 = 0 ;
  gpiod::edge_event *result = 0 ;
  
  arg1 = (gpiod::edge_event *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::edge_event const & is null", 0);
    return 0;
  } 
  result = (gpiod::edge_event *)new gpiod::edge_event((gpiod::edge_event const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpiodroid_delete_edge_event(void * jarg1) {
  gpiod::edge_event *arg1 = (gpiod::edge_event *) 0 ;
  
  arg1 = (gpiod::edge_event *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_gpiodroid_edge_event_type(void * jarg1) {
  int jresult ;
  gpiod::edge_event *arg1 = (gpiod::edge_event *) 0 ;
  gpiod::edge_event::event_type result;
  
  arg1 = (gpiod::edge_event *)jarg1; 
  result = (gpiod::edge_event::event_type)((gpiod::edge_event const *)arg1)->type();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_edge_event_timestamp_ns(void * jarg1) {
  void * jresult ;
  gpiod::edge_event *arg1 = (gpiod::edge_event *) 0 ;
  timestamp result;
  
  arg1 = (gpiod::edge_event *)jarg1; 
  result = ((gpiod::edge_event const *)arg1)->timestamp_ns();
  jresult = new timestamp(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_edge_event_line_offset(void * jarg1) {
  void * jresult ;
  gpiod::edge_event *arg1 = (gpiod::edge_event *) 0 ;
  line::offset result;
  
  arg1 = (gpiod::edge_event *)jarg1; 
  result = ((gpiod::edge_event const *)arg1)->line_offset();
  jresult = new line::offset(result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_gpiodroid_edge_event_global_seqno(void * jarg1) {
  unsigned long jresult ;
  gpiod::edge_event *arg1 = (gpiod::edge_event *) 0 ;
  unsigned long result;
  
  arg1 = (gpiod::edge_event *)jarg1; 
  result = (unsigned long)((gpiod::edge_event const *)arg1)->global_seqno();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_gpiodroid_edge_event_line_seqno(void * jarg1) {
  unsigned long jresult ;
  gpiod::edge_event *arg1 = (gpiod::edge_event *) 0 ;
  unsigned long result;
  
  arg1 = (gpiod::edge_event *)jarg1; 
  result = (unsigned long)((gpiod::edge_event const *)arg1)->line_seqno();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_chip_closed__SWIG_0(void * jarg1) {
  void * jresult ;
  ::std::string *arg1 = 0 ;
  gpiod::chip_closed *result = 0 ;
  
  arg1 = (::std::string *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "::std::string const & is null", 0);
    return 0;
  } 
  result = (gpiod::chip_closed *)new gpiod::chip_closed((::std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_chip_closed__SWIG_1(void * jarg1) {
  void * jresult ;
  gpiod::chip_closed *arg1 = 0 ;
  gpiod::chip_closed *result = 0 ;
  
  arg1 = (gpiod::chip_closed *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::chip_closed const & is null", 0);
    return 0;
  } 
  result = (gpiod::chip_closed *)new gpiod::chip_closed((gpiod::chip_closed const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpiodroid_delete_chip_closed(void * jarg1) {
  gpiod::chip_closed *arg1 = (gpiod::chip_closed *) 0 ;
  
  arg1 = (gpiod::chip_closed *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_request_released__SWIG_0(void * jarg1) {
  void * jresult ;
  ::std::string *arg1 = 0 ;
  gpiod::request_released *result = 0 ;
  
  arg1 = (::std::string *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "::std::string const & is null", 0);
    return 0;
  } 
  result = (gpiod::request_released *)new gpiod::request_released((::std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_request_released__SWIG_1(void * jarg1) {
  void * jresult ;
  gpiod::request_released *arg1 = 0 ;
  gpiod::request_released *result = 0 ;
  
  arg1 = (gpiod::request_released *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::request_released const & is null", 0);
    return 0;
  } 
  result = (gpiod::request_released *)new gpiod::request_released((gpiod::request_released const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpiodroid_delete_request_released(void * jarg1) {
  gpiod::request_released *arg1 = (gpiod::request_released *) 0 ;
  
  arg1 = (gpiod::request_released *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_bad_mapping__SWIG_0(void * jarg1) {
  void * jresult ;
  ::std::string *arg1 = 0 ;
  gpiod::bad_mapping *result = 0 ;
  
  arg1 = (::std::string *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "::std::string const & is null", 0);
    return 0;
  } 
  result = (gpiod::bad_mapping *)new gpiod::bad_mapping((::std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_bad_mapping__SWIG_1(void * jarg1) {
  void * jresult ;
  gpiod::bad_mapping *arg1 = 0 ;
  gpiod::bad_mapping *result = 0 ;
  
  arg1 = (gpiod::bad_mapping *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::bad_mapping const & is null", 0);
    return 0;
  } 
  result = (gpiod::bad_mapping *)new gpiod::bad_mapping((gpiod::bad_mapping const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpiodroid_delete_bad_mapping(void * jarg1) {
  gpiod::bad_mapping *arg1 = (gpiod::bad_mapping *) 0 ;
  
  arg1 = (gpiod::bad_mapping *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_info_event__SWIG_0(void * jarg1) {
  void * jresult ;
  gpiod::info_event *arg1 = 0 ;
  gpiod::info_event *result = 0 ;
  
  arg1 = (gpiod::info_event *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::info_event const & is null", 0);
    return 0;
  } 
  result = (gpiod::info_event *)new gpiod::info_event((gpiod::info_event const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpiodroid_delete_info_event(void * jarg1) {
  gpiod::info_event *arg1 = (gpiod::info_event *) 0 ;
  
  arg1 = (gpiod::info_event *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_gpiodroid_info_event_type(void * jarg1) {
  int jresult ;
  gpiod::info_event *arg1 = (gpiod::info_event *) 0 ;
  gpiod::info_event::event_type result;
  
  arg1 = (gpiod::info_event *)jarg1; 
  result = (gpiod::info_event::event_type)((gpiod::info_event const *)arg1)->type();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_info_event_timestamp_ns(void * jarg1) {
  void * jresult ;
  gpiod::info_event *arg1 = (gpiod::info_event *) 0 ;
  ::std::uint64_t result;
  
  arg1 = (gpiod::info_event *)jarg1; 
  result = ((gpiod::info_event const *)arg1)->timestamp_ns();
  jresult = new ::std::uint64_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_info_event_get_line_info(void * jarg1) {
  void * jresult ;
  gpiod::info_event *arg1 = (gpiod::info_event *) 0 ;
  gpiod::line_info *result = 0 ;
  
  arg1 = (gpiod::info_event *)jarg1; 
  result = (gpiod::line_info *) &((gpiod::info_event const *)arg1)->get_line_info();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_line_config__SWIG_0() {
  void * jresult ;
  gpiod::line_config *result = 0 ;
  
  result = (gpiod::line_config *)new gpiod::line_config();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_line_config__SWIG_1(void * jarg1) {
  void * jresult ;
  gpiod::line_config *arg1 = 0 ;
  std::unique_ptr< gpiod::line_config > rvrdeleter1 ;
  gpiod::line_config *result = 0 ;
  
  arg1 = (gpiod::line_config *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::line_config && is null", 0);
    return 0;
  }
  rvrdeleter1.reset(arg1); 
  result = (gpiod::line_config *)new gpiod::line_config((gpiod::line_config &&)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpiodroid_delete_line_config(void * jarg1) {
  gpiod::line_config *arg1 = (gpiod::line_config *) 0 ;
  
  arg1 = (gpiod::line_config *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_config_reset(void * jarg1) {
  void * jresult ;
  gpiod::line_config *arg1 = (gpiod::line_config *) 0 ;
  gpiod::line_config *result = 0 ;
  
  arg1 = (gpiod::line_config *)jarg1; 
  result = (gpiod::line_config *) &(arg1)->reset();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_config_add_line_settings__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  gpiod::line_config *arg1 = (gpiod::line_config *) 0 ;
  line::offset arg2 ;
  gpiod::line_settings *arg3 = 0 ;
  line::offset *argp2 ;
  gpiod::line_config *result = 0 ;
  
  arg1 = (gpiod::line_config *)jarg1; 
  argp2 = (line::offset *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null line::offset", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (gpiod::line_settings *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::line_settings const & is null", 0);
    return 0;
  } 
  result = (gpiod::line_config *) &(arg1)->add_line_settings(arg2,(gpiod::line_settings const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_config_add_line_settings__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  gpiod::line_config *arg1 = (gpiod::line_config *) 0 ;
  line::offsets *arg2 = 0 ;
  gpiod::line_settings *arg3 = 0 ;
  gpiod::line_config *result = 0 ;
  
  arg1 = (gpiod::line_config *)jarg1; 
  arg2 = (line::offsets *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "line::offsets const & is null", 0);
    return 0;
  } 
  arg3 = (gpiod::line_settings *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::line_settings const & is null", 0);
    return 0;
  } 
  result = (gpiod::line_config *) &(arg1)->add_line_settings((line::offsets const &)*arg2,(gpiod::line_settings const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_config_set_output_values(void * jarg1, void * jarg2) {
  void * jresult ;
  gpiod::line_config *arg1 = (gpiod::line_config *) 0 ;
  line::values *arg2 = 0 ;
  gpiod::line_config *result = 0 ;
  
  arg1 = (gpiod::line_config *)jarg1; 
  arg2 = (line::values *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "line::values const & is null", 0);
    return 0;
  } 
  result = (gpiod::line_config *) &(arg1)->set_output_values((line::values const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_config_get_line_settings(void * jarg1) {
  void * jresult ;
  gpiod::line_config *arg1 = (gpiod::line_config *) 0 ;
  SwigValueWrapper< ::std::map< line::offset,gpiod::line_settings > > result;
  
  arg1 = (gpiod::line_config *)jarg1; 
  result = ((gpiod::line_config const *)arg1)->get_line_settings();
  jresult = new ::std::map< line::offset,gpiod::line_settings >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_line_info__SWIG_0(void * jarg1) {
  void * jresult ;
  gpiod::line_info *arg1 = 0 ;
  gpiod::line_info *result = 0 ;
  
  arg1 = (gpiod::line_info *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::line_info const & is null", 0);
    return 0;
  } 
  result = (gpiod::line_info *)new gpiod::line_info((gpiod::line_info const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpiodroid_delete_line_info(void * jarg1) {
  gpiod::line_info *arg1 = (gpiod::line_info *) 0 ;
  
  arg1 = (gpiod::line_info *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_info_offset(void * jarg1) {
  void * jresult ;
  gpiod::line_info *arg1 = (gpiod::line_info *) 0 ;
  line::offset result;
  
  arg1 = (gpiod::line_info *)jarg1; 
  result = ((gpiod::line_info const *)arg1)->offset();
  jresult = new line::offset(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_info_name(void * jarg1) {
  void * jresult ;
  gpiod::line_info *arg1 = (gpiod::line_info *) 0 ;
  ::std::string result;
  
  arg1 = (gpiod::line_info *)jarg1; 
  result = ((gpiod::line_info const *)arg1)->name();
  jresult = new ::std::string(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gpiodroid_line_info_used(void * jarg1) {
  unsigned int jresult ;
  gpiod::line_info *arg1 = (gpiod::line_info *) 0 ;
  bool result;
  
  arg1 = (gpiod::line_info *)jarg1; 
  result = (bool)((gpiod::line_info const *)arg1)->used();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_info_consumer(void * jarg1) {
  void * jresult ;
  gpiod::line_info *arg1 = (gpiod::line_info *) 0 ;
  ::std::string result;
  
  arg1 = (gpiod::line_info *)jarg1; 
  result = ((gpiod::line_info const *)arg1)->consumer();
  jresult = new ::std::string(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_info_direction(void * jarg1) {
  void * jresult ;
  gpiod::line_info *arg1 = (gpiod::line_info *) 0 ;
  line::direction result;
  
  arg1 = (gpiod::line_info *)jarg1; 
  result = ((gpiod::line_info const *)arg1)->direction();
  jresult = new line::direction(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_info_edge_detection(void * jarg1) {
  void * jresult ;
  gpiod::line_info *arg1 = (gpiod::line_info *) 0 ;
  line::edge result;
  
  arg1 = (gpiod::line_info *)jarg1; 
  result = ((gpiod::line_info const *)arg1)->edge_detection();
  jresult = new line::edge(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_info_bias(void * jarg1) {
  void * jresult ;
  gpiod::line_info *arg1 = (gpiod::line_info *) 0 ;
  line::bias result;
  
  arg1 = (gpiod::line_info *)jarg1; 
  result = ((gpiod::line_info const *)arg1)->bias();
  jresult = new line::bias(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_info_drive(void * jarg1) {
  void * jresult ;
  gpiod::line_info *arg1 = (gpiod::line_info *) 0 ;
  line::drive result;
  
  arg1 = (gpiod::line_info *)jarg1; 
  result = ((gpiod::line_info const *)arg1)->drive();
  jresult = new line::drive(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gpiodroid_line_info_active_low(void * jarg1) {
  unsigned int jresult ;
  gpiod::line_info *arg1 = (gpiod::line_info *) 0 ;
  bool result;
  
  arg1 = (gpiod::line_info *)jarg1; 
  result = (bool)((gpiod::line_info const *)arg1)->active_low();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gpiodroid_line_info_debounced(void * jarg1) {
  unsigned int jresult ;
  gpiod::line_info *arg1 = (gpiod::line_info *) 0 ;
  bool result;
  
  arg1 = (gpiod::line_info *)jarg1; 
  result = (bool)((gpiod::line_info const *)arg1)->debounced();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_info_debounce_period(void * jarg1) {
  void * jresult ;
  gpiod::line_info *arg1 = (gpiod::line_info *) 0 ;
  ::std::chrono::microseconds result;
  
  arg1 = (gpiod::line_info *)jarg1; 
  result = ((gpiod::line_info const *)arg1)->debounce_period();
  jresult = new ::std::chrono::microseconds(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_info_event_clock(void * jarg1) {
  void * jresult ;
  gpiod::line_info *arg1 = (gpiod::line_info *) 0 ;
  line::clock result;
  
  arg1 = (gpiod::line_info *)jarg1; 
  result = ((gpiod::line_info const *)arg1)->event_clock();
  jresult = new line::clock(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_line_request(void * jarg1) {
  void * jresult ;
  gpiod::line_request *arg1 = 0 ;
  std::unique_ptr< gpiod::line_request > rvrdeleter1 ;
  gpiod::line_request *result = 0 ;
  
  arg1 = (gpiod::line_request *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::line_request && is null", 0);
    return 0;
  }
  rvrdeleter1.reset(arg1); 
  result = (gpiod::line_request *)new gpiod::line_request((gpiod::line_request &&)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpiodroid_delete_line_request(void * jarg1) {
  gpiod::line_request *arg1 = (gpiod::line_request *) 0 ;
  
  arg1 = (gpiod::line_request *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpiodroid_line_request_release(void * jarg1) {
  gpiod::line_request *arg1 = (gpiod::line_request *) 0 ;
  
  arg1 = (gpiod::line_request *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_request_num_lines(void * jarg1) {
  void * jresult ;
  gpiod::line_request *arg1 = (gpiod::line_request *) 0 ;
  ::std::size_t result;
  
  arg1 = (gpiod::line_request *)jarg1; 
  result = ((gpiod::line_request const *)arg1)->num_lines();
  jresult = new ::std::size_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_request_offsets(void * jarg1) {
  void * jresult ;
  gpiod::line_request *arg1 = (gpiod::line_request *) 0 ;
  line::offsets result;
  
  arg1 = (gpiod::line_request *)jarg1; 
  result = ((gpiod::line_request const *)arg1)->offsets();
  jresult = new line::offsets(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_request_get_value(void * jarg1, void * jarg2) {
  void * jresult ;
  gpiod::line_request *arg1 = (gpiod::line_request *) 0 ;
  line::offset arg2 ;
  line::offset *argp2 ;
  line::value result;
  
  arg1 = (gpiod::line_request *)jarg1; 
  argp2 = (line::offset *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null line::offset", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->get_value(arg2);
  jresult = new line::value(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_request_get_values__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  gpiod::line_request *arg1 = (gpiod::line_request *) 0 ;
  line::offsets *arg2 = 0 ;
  line::values result;
  
  arg1 = (gpiod::line_request *)jarg1; 
  arg2 = (line::offsets *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "line::offsets const & is null", 0);
    return 0;
  } 
  result = (arg1)->get_values((line::offsets const &)*arg2);
  jresult = new line::values(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_request_get_values__SWIG_1(void * jarg1) {
  void * jresult ;
  gpiod::line_request *arg1 = (gpiod::line_request *) 0 ;
  line::values result;
  
  arg1 = (gpiod::line_request *)jarg1; 
  result = (arg1)->get_values();
  jresult = new line::values(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpiodroid_line_request_get_values__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  gpiod::line_request *arg1 = (gpiod::line_request *) 0 ;
  line::offsets *arg2 = 0 ;
  line::values *arg3 = 0 ;
  
  arg1 = (gpiod::line_request *)jarg1; 
  arg2 = (line::offsets *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "line::offsets const & is null", 0);
    return ;
  } 
  arg3 = (line::values *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "line::values & is null", 0);
    return ;
  } 
  (arg1)->get_values((line::offsets const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpiodroid_line_request_get_values__SWIG_3(void * jarg1, void * jarg2) {
  gpiod::line_request *arg1 = (gpiod::line_request *) 0 ;
  line::values *arg2 = 0 ;
  
  arg1 = (gpiod::line_request *)jarg1; 
  arg2 = (line::values *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "line::values & is null", 0);
    return ;
  } 
  (arg1)->get_values(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_request_set_value(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  gpiod::line_request *arg1 = (gpiod::line_request *) 0 ;
  line::offset arg2 ;
  line::value arg3 ;
  line::offset *argp2 ;
  line::value *argp3 ;
  gpiod::line_request *result = 0 ;
  
  arg1 = (gpiod::line_request *)jarg1; 
  argp2 = (line::offset *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null line::offset", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (line::value *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null line::value", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (gpiod::line_request *) &(arg1)->set_value(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_request_set_values__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  gpiod::line_request *arg1 = (gpiod::line_request *) 0 ;
  line::value_mappings *arg2 = 0 ;
  gpiod::line_request *result = 0 ;
  
  arg1 = (gpiod::line_request *)jarg1; 
  arg2 = (line::value_mappings *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "line::value_mappings const & is null", 0);
    return 0;
  } 
  result = (gpiod::line_request *) &(arg1)->set_values((line::value_mappings const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_request_set_values__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  gpiod::line_request *arg1 = (gpiod::line_request *) 0 ;
  line::offsets *arg2 = 0 ;
  line::values *arg3 = 0 ;
  gpiod::line_request *result = 0 ;
  
  arg1 = (gpiod::line_request *)jarg1; 
  arg2 = (line::offsets *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "line::offsets const & is null", 0);
    return 0;
  } 
  arg3 = (line::values *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "line::values const & is null", 0);
    return 0;
  } 
  result = (gpiod::line_request *) &(arg1)->set_values((line::offsets const &)*arg2,(line::values const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_request_set_values__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  gpiod::line_request *arg1 = (gpiod::line_request *) 0 ;
  line::values *arg2 = 0 ;
  gpiod::line_request *result = 0 ;
  
  arg1 = (gpiod::line_request *)jarg1; 
  arg2 = (line::values *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "line::values const & is null", 0);
    return 0;
  } 
  result = (gpiod::line_request *) &(arg1)->set_values((line::values const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_request_reconfigure_lines(void * jarg1, void * jarg2) {
  void * jresult ;
  gpiod::line_request *arg1 = (gpiod::line_request *) 0 ;
  gpiod::line_config *arg2 = 0 ;
  gpiod::line_request *result = 0 ;
  
  arg1 = (gpiod::line_request *)jarg1; 
  arg2 = (gpiod::line_config *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::line_config const & is null", 0);
    return 0;
  } 
  result = (gpiod::line_request *) &(arg1)->reconfigure_lines((gpiod::line_config const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_gpiodroid_line_request_fd(void * jarg1) {
  int jresult ;
  gpiod::line_request *arg1 = (gpiod::line_request *) 0 ;
  int result;
  
  arg1 = (gpiod::line_request *)jarg1; 
  result = (int)((gpiod::line_request const *)arg1)->fd();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gpiodroid_line_request_wait_edge_events(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  gpiod::line_request *arg1 = (gpiod::line_request *) 0 ;
  ::std::chrono::nanoseconds *arg2 = 0 ;
  bool result;
  
  arg1 = (gpiod::line_request *)jarg1; 
  arg2 = (::std::chrono::nanoseconds *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "::std::chrono::nanoseconds const & is null", 0);
    return 0;
  } 
  result = (bool)((gpiod::line_request const *)arg1)->wait_edge_events((::std::chrono::nanoseconds const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_request_read_edge_events__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  gpiod::line_request *arg1 = (gpiod::line_request *) 0 ;
  gpiod::edge_event_buffer *arg2 = 0 ;
  ::std::size_t result;
  
  arg1 = (gpiod::line_request *)jarg1; 
  arg2 = (gpiod::edge_event_buffer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::edge_event_buffer & is null", 0);
    return 0;
  } 
  result = (arg1)->read_edge_events(*arg2);
  jresult = new ::std::size_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_request_read_edge_events__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  gpiod::line_request *arg1 = (gpiod::line_request *) 0 ;
  gpiod::edge_event_buffer *arg2 = 0 ;
  ::std::size_t arg3 ;
  ::std::size_t *argp3 ;
  ::std::size_t result;
  
  arg1 = (gpiod::line_request *)jarg1; 
  arg2 = (gpiod::edge_event_buffer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::edge_event_buffer & is null", 0);
    return 0;
  } 
  argp3 = (::std::size_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ::std::size_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->read_edge_events(*arg2,arg3);
  jresult = new ::std::size_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_line_settings__SWIG_0() {
  void * jresult ;
  gpiod::line_settings *result = 0 ;
  
  result = (gpiod::line_settings *)new gpiod::line_settings();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_line_settings__SWIG_1(void * jarg1) {
  void * jresult ;
  gpiod::line_settings *arg1 = 0 ;
  gpiod::line_settings *result = 0 ;
  
  arg1 = (gpiod::line_settings *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::line_settings const & is null", 0);
    return 0;
  } 
  result = (gpiod::line_settings *)new gpiod::line_settings((gpiod::line_settings const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpiodroid_delete_line_settings(void * jarg1) {
  gpiod::line_settings *arg1 = (gpiod::line_settings *) 0 ;
  
  arg1 = (gpiod::line_settings *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_settings_reset(void * jarg1) {
  void * jresult ;
  gpiod::line_settings *arg1 = (gpiod::line_settings *) 0 ;
  gpiod::line_settings *result = 0 ;
  
  arg1 = (gpiod::line_settings *)jarg1; 
  result = (gpiod::line_settings *) &(arg1)->reset();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_settings_set_direction(void * jarg1, void * jarg2) {
  void * jresult ;
  gpiod::line_settings *arg1 = (gpiod::line_settings *) 0 ;
  line::direction arg2 ;
  line::direction *argp2 ;
  gpiod::line_settings *result = 0 ;
  
  arg1 = (gpiod::line_settings *)jarg1; 
  argp2 = (line::direction *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null line::direction", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (gpiod::line_settings *) &(arg1)->set_direction(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_settings_direction(void * jarg1) {
  void * jresult ;
  gpiod::line_settings *arg1 = (gpiod::line_settings *) 0 ;
  line::direction result;
  
  arg1 = (gpiod::line_settings *)jarg1; 
  result = ((gpiod::line_settings const *)arg1)->direction();
  jresult = new line::direction(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_settings_set_edge_detection(void * jarg1, void * jarg2) {
  void * jresult ;
  gpiod::line_settings *arg1 = (gpiod::line_settings *) 0 ;
  line::edge arg2 ;
  line::edge *argp2 ;
  gpiod::line_settings *result = 0 ;
  
  arg1 = (gpiod::line_settings *)jarg1; 
  argp2 = (line::edge *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null line::edge", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (gpiod::line_settings *) &(arg1)->set_edge_detection(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_settings_edge_detection(void * jarg1) {
  void * jresult ;
  gpiod::line_settings *arg1 = (gpiod::line_settings *) 0 ;
  line::edge result;
  
  arg1 = (gpiod::line_settings *)jarg1; 
  result = ((gpiod::line_settings const *)arg1)->edge_detection();
  jresult = new line::edge(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_settings_set_bias(void * jarg1, void * jarg2) {
  void * jresult ;
  gpiod::line_settings *arg1 = (gpiod::line_settings *) 0 ;
  line::bias arg2 ;
  line::bias *argp2 ;
  gpiod::line_settings *result = 0 ;
  
  arg1 = (gpiod::line_settings *)jarg1; 
  argp2 = (line::bias *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null line::bias", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (gpiod::line_settings *) &(arg1)->set_bias(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_settings_bias(void * jarg1) {
  void * jresult ;
  gpiod::line_settings *arg1 = (gpiod::line_settings *) 0 ;
  line::bias result;
  
  arg1 = (gpiod::line_settings *)jarg1; 
  result = ((gpiod::line_settings const *)arg1)->bias();
  jresult = new line::bias(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_settings_set_drive(void * jarg1, void * jarg2) {
  void * jresult ;
  gpiod::line_settings *arg1 = (gpiod::line_settings *) 0 ;
  line::drive arg2 ;
  line::drive *argp2 ;
  gpiod::line_settings *result = 0 ;
  
  arg1 = (gpiod::line_settings *)jarg1; 
  argp2 = (line::drive *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null line::drive", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (gpiod::line_settings *) &(arg1)->set_drive(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_settings_drive(void * jarg1) {
  void * jresult ;
  gpiod::line_settings *arg1 = (gpiod::line_settings *) 0 ;
  line::drive result;
  
  arg1 = (gpiod::line_settings *)jarg1; 
  result = ((gpiod::line_settings const *)arg1)->drive();
  jresult = new line::drive(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_settings_set_active_low(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  gpiod::line_settings *arg1 = (gpiod::line_settings *) 0 ;
  bool arg2 ;
  gpiod::line_settings *result = 0 ;
  
  arg1 = (gpiod::line_settings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (gpiod::line_settings *) &(arg1)->set_active_low(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gpiodroid_line_settings_active_low(void * jarg1) {
  unsigned int jresult ;
  gpiod::line_settings *arg1 = (gpiod::line_settings *) 0 ;
  bool result;
  
  arg1 = (gpiod::line_settings *)jarg1; 
  result = (bool)((gpiod::line_settings const *)arg1)->active_low();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_settings_set_debounce_period(void * jarg1, void * jarg2) {
  void * jresult ;
  gpiod::line_settings *arg1 = (gpiod::line_settings *) 0 ;
  ::std::chrono::microseconds *arg2 = 0 ;
  gpiod::line_settings *result = 0 ;
  
  arg1 = (gpiod::line_settings *)jarg1; 
  arg2 = (::std::chrono::microseconds *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "::std::chrono::microseconds const & is null", 0);
    return 0;
  } 
  result = (gpiod::line_settings *) &(arg1)->set_debounce_period((::std::chrono::microseconds const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_settings_debounce_period(void * jarg1) {
  void * jresult ;
  gpiod::line_settings *arg1 = (gpiod::line_settings *) 0 ;
  ::std::chrono::microseconds result;
  
  arg1 = (gpiod::line_settings *)jarg1; 
  result = ((gpiod::line_settings const *)arg1)->debounce_period();
  jresult = new ::std::chrono::microseconds(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_settings_set_event_clock(void * jarg1, void * jarg2) {
  void * jresult ;
  gpiod::line_settings *arg1 = (gpiod::line_settings *) 0 ;
  line::clock arg2 ;
  line::clock *argp2 ;
  gpiod::line_settings *result = 0 ;
  
  arg1 = (gpiod::line_settings *)jarg1; 
  argp2 = (line::clock *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null line::clock", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (gpiod::line_settings *) &(arg1)->set_event_clock(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_settings_event_clock(void * jarg1) {
  void * jresult ;
  gpiod::line_settings *arg1 = (gpiod::line_settings *) 0 ;
  line::clock result;
  
  arg1 = (gpiod::line_settings *)jarg1; 
  result = ((gpiod::line_settings const *)arg1)->event_clock();
  jresult = new line::clock(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_settings_set_output_value(void * jarg1, void * jarg2) {
  void * jresult ;
  gpiod::line_settings *arg1 = (gpiod::line_settings *) 0 ;
  line::value arg2 ;
  line::value *argp2 ;
  gpiod::line_settings *result = 0 ;
  
  arg1 = (gpiod::line_settings *)jarg1; 
  argp2 = (line::value *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null line::value", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (gpiod::line_settings *) &(arg1)->set_output_value(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_line_settings_output_value(void * jarg1) {
  void * jresult ;
  gpiod::line_settings *arg1 = (gpiod::line_settings *) 0 ;
  line::value result;
  
  arg1 = (gpiod::line_settings *)jarg1; 
  result = ((gpiod::line_settings const *)arg1)->output_value();
  jresult = new line::value(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_offset__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  gpiod::line::offset *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (gpiod::line::offset *)new gpiod::line::offset(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_offset__SWIG_1() {
  void * jresult ;
  gpiod::line::offset *result = 0 ;
  
  result = (gpiod::line::offset *)new gpiod::line::offset();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_offset__SWIG_2(void * jarg1) {
  void * jresult ;
  gpiod::line::offset *arg1 = 0 ;
  gpiod::line::offset *result = 0 ;
  
  arg1 = (gpiod::line::offset *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::line::offset const & is null", 0);
    return 0;
  } 
  result = (gpiod::line::offset *)new gpiod::line::offset((gpiod::line::offset const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpiodroid_delete_offset(void * jarg1) {
  gpiod::line::offset *arg1 = (gpiod::line::offset *) 0 ;
  
  arg1 = (gpiod::line::offset *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gpiodroid_is_gpiochip_device(void * jarg1) {
  unsigned int jresult ;
  ::std::filesystem::path *arg1 = 0 ;
  bool result;
  
  arg1 = (::std::filesystem::path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "::std::filesystem::path const & is null", 0);
    return 0;
  } 
  result = (bool)gpiod::is_gpiochip_device((::std::filesystem::path const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_api_version() {
  void * jresult ;
  ::std::string *result = 0 ;
  
  result = (::std::string *) &gpiod::api_version();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_request_builder(void * jarg1) {
  void * jresult ;
  gpiod::request_builder *arg1 = 0 ;
  std::unique_ptr< gpiod::request_builder > rvrdeleter1 ;
  gpiod::request_builder *result = 0 ;
  
  arg1 = (gpiod::request_builder *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::request_builder && is null", 0);
    return 0;
  }
  rvrdeleter1.reset(arg1); 
  result = (gpiod::request_builder *)new gpiod::request_builder((gpiod::request_builder &&)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpiodroid_delete_request_builder(void * jarg1) {
  gpiod::request_builder *arg1 = (gpiod::request_builder *) 0 ;
  
  arg1 = (gpiod::request_builder *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_request_builder_set_request_config(void * jarg1, void * jarg2) {
  void * jresult ;
  gpiod::request_builder *arg1 = (gpiod::request_builder *) 0 ;
  gpiod::request_config *arg2 = 0 ;
  gpiod::request_builder *result = 0 ;
  
  arg1 = (gpiod::request_builder *)jarg1; 
  arg2 = (gpiod::request_config *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::request_config & is null", 0);
    return 0;
  } 
  result = (gpiod::request_builder *) &(arg1)->set_request_config(*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_request_builder_get_request_config(void * jarg1) {
  void * jresult ;
  gpiod::request_builder *arg1 = (gpiod::request_builder *) 0 ;
  gpiod::request_config *result = 0 ;
  
  arg1 = (gpiod::request_builder *)jarg1; 
  result = (gpiod::request_config *) &((gpiod::request_builder const *)arg1)->get_request_config();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_request_builder_set_consumer(void * jarg1, void * jarg2) {
  void * jresult ;
  gpiod::request_builder *arg1 = (gpiod::request_builder *) 0 ;
  ::std::string *arg2 = 0 ;
  gpiod::request_builder *result = 0 ;
  
  arg1 = (gpiod::request_builder *)jarg1; 
  arg2 = (::std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "::std::string const & is null", 0);
    return 0;
  } 
  result = (gpiod::request_builder *) &(arg1)->set_consumer((::std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_request_builder_set_event_buffer_size(void * jarg1, void * jarg2) {
  void * jresult ;
  gpiod::request_builder *arg1 = (gpiod::request_builder *) 0 ;
  ::std::size_t arg2 ;
  ::std::size_t *argp2 ;
  gpiod::request_builder *result = 0 ;
  
  arg1 = (gpiod::request_builder *)jarg1; 
  argp2 = (::std::size_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ::std::size_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (gpiod::request_builder *) &(arg1)->set_event_buffer_size(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_request_builder_set_line_config(void * jarg1, void * jarg2) {
  void * jresult ;
  gpiod::request_builder *arg1 = (gpiod::request_builder *) 0 ;
  gpiod::line_config *arg2 = 0 ;
  gpiod::request_builder *result = 0 ;
  
  arg1 = (gpiod::request_builder *)jarg1; 
  arg2 = (gpiod::line_config *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::line_config & is null", 0);
    return 0;
  } 
  result = (gpiod::request_builder *) &(arg1)->set_line_config(*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_request_builder_get_line_config(void * jarg1) {
  void * jresult ;
  gpiod::request_builder *arg1 = (gpiod::request_builder *) 0 ;
  gpiod::line_config *result = 0 ;
  
  arg1 = (gpiod::request_builder *)jarg1; 
  result = (gpiod::line_config *) &((gpiod::request_builder const *)arg1)->get_line_config();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_request_builder_add_line_settings__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  gpiod::request_builder *arg1 = (gpiod::request_builder *) 0 ;
  gpiod::line::offset arg2 ;
  gpiod::line_settings *arg3 = 0 ;
  gpiod::line::offset *argp2 ;
  gpiod::request_builder *result = 0 ;
  
  arg1 = (gpiod::request_builder *)jarg1; 
  argp2 = (gpiod::line::offset *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null gpiod::line::offset", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (gpiod::line_settings *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::line_settings const & is null", 0);
    return 0;
  } 
  result = (gpiod::request_builder *) &(arg1)->add_line_settings(arg2,(gpiod::line_settings const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_request_builder_add_line_settings__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  gpiod::request_builder *arg1 = (gpiod::request_builder *) 0 ;
  gpiod::line::offsets *arg2 = 0 ;
  gpiod::line_settings *arg3 = 0 ;
  gpiod::request_builder *result = 0 ;
  
  arg1 = (gpiod::request_builder *)jarg1; 
  arg2 = (gpiod::line::offsets *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::line::offsets const & is null", 0);
    return 0;
  } 
  arg3 = (gpiod::line_settings *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::line_settings const & is null", 0);
    return 0;
  } 
  result = (gpiod::request_builder *) &(arg1)->add_line_settings((gpiod::line::offsets const &)*arg2,(gpiod::line_settings const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_request_builder_do_request(void * jarg1) {
  void * jresult ;
  gpiod::request_builder *arg1 = (gpiod::request_builder *) 0 ;
  SwigValueWrapper< gpiod::line_request > result;
  
  arg1 = (gpiod::request_builder *)jarg1; 
  result = (arg1)->do_request();
  jresult = new gpiod::line_request(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_request_config__SWIG_0() {
  void * jresult ;
  gpiod::request_config *result = 0 ;
  
  result = (gpiod::request_config *)new gpiod::request_config();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_request_config__SWIG_1(void * jarg1) {
  void * jresult ;
  gpiod::request_config *arg1 = 0 ;
  std::unique_ptr< gpiod::request_config > rvrdeleter1 ;
  gpiod::request_config *result = 0 ;
  
  arg1 = (gpiod::request_config *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::request_config && is null", 0);
    return 0;
  }
  rvrdeleter1.reset(arg1); 
  result = (gpiod::request_config *)new gpiod::request_config((gpiod::request_config &&)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpiodroid_delete_request_config(void * jarg1) {
  gpiod::request_config *arg1 = (gpiod::request_config *) 0 ;
  
  arg1 = (gpiod::request_config *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_request_config_set_consumer(void * jarg1, void * jarg2) {
  void * jresult ;
  gpiod::request_config *arg1 = (gpiod::request_config *) 0 ;
  ::std::string *arg2 = 0 ;
  gpiod::request_config *result = 0 ;
  
  arg1 = (gpiod::request_config *)jarg1; 
  arg2 = (::std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "::std::string const & is null", 0);
    return 0;
  } 
  result = (gpiod::request_config *) &(arg1)->set_consumer((::std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_request_config_consumer(void * jarg1) {
  void * jresult ;
  gpiod::request_config *arg1 = (gpiod::request_config *) 0 ;
  ::std::string result;
  
  arg1 = (gpiod::request_config *)jarg1; 
  result = ((gpiod::request_config const *)arg1)->consumer();
  jresult = new ::std::string(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_request_config_set_event_buffer_size(void * jarg1, void * jarg2) {
  void * jresult ;
  gpiod::request_config *arg1 = (gpiod::request_config *) 0 ;
  ::std::size_t arg2 ;
  ::std::size_t *argp2 ;
  gpiod::request_config *result = 0 ;
  
  arg1 = (gpiod::request_config *)jarg1; 
  argp2 = (::std::size_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ::std::size_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (gpiod::request_config *) &(arg1)->set_event_buffer_size(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_request_config_event_buffer_size(void * jarg1) {
  void * jresult ;
  gpiod::request_config *arg1 = (gpiod::request_config *) 0 ;
  ::std::size_t result;
  
  arg1 = (gpiod::request_config *)jarg1; 
  result = ((gpiod::request_config const *)arg1)->event_buffer_size();
  jresult = new ::std::size_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_timestamp__SWIG_0() {
  void * jresult ;
  gpiod::timestamp *result = 0 ;
  
  result = (gpiod::timestamp *)new gpiod::timestamp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_timestamp__SWIG_1(void * jarg1) {
  void * jresult ;
  ::std::uint64_t arg1 ;
  ::std::uint64_t *argp1 ;
  gpiod::timestamp *result = 0 ;
  
  argp1 = (::std::uint64_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ::std::uint64_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (gpiod::timestamp *)new gpiod::timestamp(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_new_timestamp__SWIG_2(void * jarg1) {
  void * jresult ;
  gpiod::timestamp *arg1 = 0 ;
  gpiod::timestamp *result = 0 ;
  
  arg1 = (gpiod::timestamp *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpiod::timestamp const & is null", 0);
    return 0;
  } 
  result = (gpiod::timestamp *)new gpiod::timestamp((gpiod::timestamp const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpiodroid_delete_timestamp(void * jarg1) {
  gpiod::timestamp *arg1 = (gpiod::timestamp *) 0 ;
  
  arg1 = (gpiod::timestamp *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_timestamp_ns(void * jarg1) {
  void * jresult ;
  gpiod::timestamp *arg1 = (gpiod::timestamp *) 0 ;
  ::std::uint64_t result;
  
  arg1 = (gpiod::timestamp *)jarg1; 
  result = ((gpiod::timestamp const *)arg1)->ns();
  jresult = new ::std::uint64_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_timestamp_to_time_point_monotonic(void * jarg1) {
  void * jresult ;
  gpiod::timestamp *arg1 = (gpiod::timestamp *) 0 ;
  gpiod::timestamp::time_point_monotonic result;
  
  arg1 = (gpiod::timestamp *)jarg1; 
  result = ((gpiod::timestamp const *)arg1)->to_time_point_monotonic();
  jresult = new gpiod::timestamp::time_point_monotonic(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpiodroid_timestamp_to_time_point_realtime(void * jarg1) {
  void * jresult ;
  gpiod::timestamp *arg1 = (gpiod::timestamp *) 0 ;
  gpiod::timestamp::time_point_realtime result;
  
  arg1 = (gpiod::timestamp *)jarg1; 
  result = ((gpiod::timestamp const *)arg1)->to_time_point_realtime();
  jresult = new gpiod::timestamp::time_point_realtime(result); 
  return jresult;
}


#ifdef __cplusplus
}
#endif

